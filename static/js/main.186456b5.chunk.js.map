{"version":3,"sources":["actions/actions.js","reducers/index.js","Map/hereTileLayers.js","Map/Map.jsx","Controls/Settings.jsx","Controls/Control.jsx","App.jsx","index.js"],"names":["hereAppCode","hereAppId","UPDATE_TEXTINPUT","RECEIVE_GEOCODE_RESULTS","REQUEST_GEOCODE_RESULTS","UPDATE_CENTER","UPDATE_SETTINGS","RECEIVE_ISOCHRONES_RESULTS","REQUEST_ISOCHRONES_RESULTS","processGeocodeResponse","json","dispatch","results","latLng","Response","View","length","processedResults","Result","address","Location","LocationType","push","title","Address","Label","description","PostalCode","displayposition","lat","DisplayPosition","Latitude","lng","Longitude","parseGeocodeResponse","receiveGeocodeResults","payload","type","requestGeocodeResults","updateTextInput","processIsochronesResponse","response","isoline","reverse","parseIsochronesResponse","receiveIsochronesResults","processIsolineSettings","settings","isolineParameters","mode","traffic","rangetype","start","isochronesCenter","ranges","rangeInSeconds","range","value","intervalInSeconds","interval","join","rangeInMeters","intervalInMeters","requestIsochronesResults","initialIsochronesControlsState","userInput","geocodeResults","isochrones","isFetching","isFetchingIsochrones","max","rootReducer","combineReducers","isochronesControls","state","action","inputValue","HereTileLayers","HERE","L","extend","options","subdomains","minZoom","maxZoom","scheme","resource","mapId","format","appId","appCode","initialize","schemeStart","this","split","tileResolution","retina","tileServer","indexOf","tileUrl","_attributionUrl","template","prototype","call","_attributionText","onAdd","map","_attributionBBoxes","_fetchAttributionBBoxes","onRemove","_map","attributionControl","removeAttribution","off","_findCopyrightBBox","xmlhttp","XMLHttpRequest","onreadystatechange","readyState","status","_parseAttributionBBoxes","JSON","parse","responseText","open","send","providers","normal","i","boxes","j","box","on","_attributionProviders","visibleProviders","zoom","getZoom","visibleBounds","getBounds","minLevel","maxLevel","overlaps","attributions","provider","alt","label","attributionText","addAttribution","here","opts","style","width","height","hereReducedDay","markersLayer","featureGroup","isochronesLayer","southWest","northEast","mapParams","center","zoomControl","maxBounds","latLngBounds","layers","Map","clearLayers","props","cnt","scaleHsl","chroma","scale","colors","isochrone","component","isochroneComponent","polygon","shape","coordString","fillColor","weight","opacity","color","pane","addTo","fitBounds","circleMarker","bindTooltip","permanent","openTooltip","setView","addIsochronesCenter","addIsochrones","createPane","baseMaps","control","position","brand","div","DomUtil","create","innerHTML","addControl","id","React","Component","connect","Settings","controls","settingName","setting","updateSettings","rangeSettings","min","step","onChange","alignRangeInterval","intervalSettings","className","Divider","size","Button","Group","basic","Object","keys","pedestrian","car","key","active","onClick","handleSettings","enabled","disabled","distance","time","discrete","inverted","segmentStyle","zIndex","top","left","maxHeight","overflow","padding","Control","handleSearchChange","event","target","fetchGeocodeResults","handleResultSelect","e","result","handleFetchIsochrones","url","URL","params","app_id","app_code","search","URLSearchParams","fetch","then","data","catch","error","console","bind","debounce","userTextInput","searchtext","Segment","Search","onSearchChange","onResultSelect","fluid","input","loading","placeholder","circular","icon","App","middleware","thunk","store","createStore","reducer","composeWithDevTools","applyMiddleware","render","document","getElementById"],"mappings":"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","file":"static/js/main.186456b5.chunk.js","sourcesContent":["const hereAppCode = \"0XXQyxbiCjVU7jN2URXuhg\";\r\nconst hereAppId = \"yATlKFDZwdLtjHzyTeCK\";\r\n\r\nexport const UPDATE_TEXTINPUT = \"UPDATE_TEXTINPUT\";\r\nexport const RECEIVE_GEOCODE_RESULTS = \"RECEIVE_GEOCODE_RESULTS\";\r\nexport const REQUEST_GEOCODE_RESULTS = \"REQUEST_GEOCODE_RESULTS\";\r\nexport const UPDATE_CENTER = \"UPDATE_CENTER\";\r\n\r\nexport const UPDATE_SETTINGS = \"UPDATE_SETTINGS\";\r\n\r\nexport const RECEIVE_ISOCHRONES_RESULTS = \"RECEIVE_ISOCHRONES_RESULTS\";\r\nexport const REQUEST_ISOCHRONES_RESULTS = \"REQUEST_ISOCHRONES_RESULTS\";\r\n\r\nexport const fetchHereGeocode = payload => dispatch => {\r\n  // It dispatches a further action to let our state know that requests are about to be made\r\n  dispatch(requestGeocodeResults());\r\n\r\n  // we define our url and parameters to be sent along\r\n  let url = new URL(\"https://geocoder.api.here.com/6.2/geocode.json\"),\r\n    params = {\r\n      app_id: hereAppId,\r\n      app_code: hereAppCode,\r\n      searchtext: payload.inputValue\r\n    };\r\n\r\n  url.search = new URLSearchParams(params);\r\n\r\n  // we use the fetch API to call HERE MAps with our parameters\r\n  return (\r\n    fetch(url)\r\n      // when a response is returned we extract the json data\r\n      .then(response => response.json())\r\n      // and this data we dispatch for processing in processGeocodeResponse\r\n      .then(data => dispatch(processGeocodeResponse(data)))\r\n      .catch(error => console.error(error))\r\n  );\r\n};\r\n\r\nconst parseGeocodeResponse = (json, latLng) => {\r\n  // parsing the response, just a simple example\r\n  if (json.Response && json.Response.View.length > 0) {\r\n    let processedResults = [];\r\n\r\n    for (const address of json.Response.View[0].Result) {\r\n      if (address.Location && address.Location.LocationType === \"point\") {\r\n        processedResults.push({\r\n          title: address.Location.Address.Label,\r\n          description: address.Location.Address.PostalCode,\r\n          displayposition: {\r\n            lat: address.Location.DisplayPosition.Latitude,\r\n            lng: address.Location.DisplayPosition.Longitude\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return processedResults;\r\n  }\r\n};\r\n\r\nconst processGeocodeResponse = json => dispatch => {\r\n  // parse the json file and dispatch the results to receiveGeocodeResults which will be reduced\r\n  const results = parseGeocodeResponse(json);\r\n  dispatch(receiveGeocodeResults(results));\r\n};\r\n\r\nexport const receiveGeocodeResults = payload => ({\r\n  type: RECEIVE_GEOCODE_RESULTS,\r\n  results: payload\r\n});\r\n\r\nexport const requestGeocodeResults = payload => ({\r\n  type: REQUEST_GEOCODE_RESULTS,\r\n  ...payload\r\n});\r\n\r\nexport const updateTextInput = payload => ({\r\n  type: UPDATE_TEXTINPUT,\r\n  payload\r\n});\r\n\r\nexport const updateCenter = payload => ({\r\n  type: UPDATE_CENTER,\r\n  ...payload\r\n});\r\n\r\nexport const updateSettings = payload => ({\r\n  type: UPDATE_SETTINGS,\r\n  ...payload\r\n});\r\n\r\nexport const fetchHereIsochrones = payload => dispatch => {\r\n  // we let the app know that we are calling the isochrones API\r\n  dispatch(requestIsochronesResults());\r\n\r\n  // we generate our GET parameters from the settigns\r\n  const isolineParameters = processIsolineSettings(payload.settings);\r\n\r\n  // as seen before :)\r\n  let url = new URL(\r\n      \"https://isoline.route.api.here.com/routing/7.2/calculateisoline.json\"\r\n    ),\r\n    params = {\r\n      app_id: hereAppId,\r\n      app_code: hereAppCode,\r\n      ...isolineParameters\r\n    };\r\n\r\n  url.search = new URLSearchParams(params);\r\n\r\n  return fetch(url)\r\n    .then(response => response.json())\r\n    .then(data => dispatch(processIsochronesResponse(data)))\r\n    .catch(error => console.error(error));\r\n};\r\n\r\nconst parseIsochronesResponse = json => {\r\n  if (json.response && json.response.isoline.length > 0) {\r\n    const isolinesReversed = json.response.isoline.reverse();\r\n    return isolinesReversed;\r\n  }\r\n  return [];\r\n};\r\n\r\nconst processIsochronesResponse = json => dispatch => {\r\n  // a small trick: we reverse the polygons that the largest comes first :-)\r\n  const results = parseIsochronesResponse(json);\r\n\r\n  // we have received our results\r\n  dispatch(receiveIsochronesResults(results));\r\n};\r\n\r\nexport const receiveIsochronesResults = results => ({\r\n  type: RECEIVE_ISOCHRONES_RESULTS,\r\n  results: results\r\n});\r\n\r\nconst processIsolineSettings = settings => {\r\n  let isolineParameters = {};\r\n\r\n  // we prepare the GET parameters according to the HERE Maps Isochrones API docs\r\n  isolineParameters.mode =\r\n    \"fastest;\" + settings.mode + \";\" + \"traffic:\" + settings.traffic + \";\";\r\n  isolineParameters.rangetype = settings.rangetype;\r\n\r\n  isolineParameters.start =\r\n    settings.isochronesCenter.lat + \",\" + settings.isochronesCenter.lng;\r\n\r\n  // seconds\r\n  const ranges = [];\r\n  if (settings.rangetype === \"time\") {\r\n    let rangeInSeconds = settings.range.value * 60;\r\n    const intervalInSeconds = settings.interval.value * 60;\r\n\r\n    // to generate ranges!\r\n    while (rangeInSeconds > 0) {\r\n      ranges.push(rangeInSeconds);\r\n      rangeInSeconds -= intervalInSeconds;\r\n    }\r\n\r\n    isolineParameters.range = ranges.join(\",\");\r\n\r\n    // meters\r\n  } else if (settings.rangetype === \"distance\") {\r\n    let rangeInMeters = settings.range.value * 1000;\r\n    const intervalInMeters = settings.interval.value * 1000;\r\n\r\n    // to generate ranges!\r\n    while (rangeInMeters > 0) {\r\n      ranges.push(rangeInMeters);\r\n      rangeInMeters -= intervalInMeters;\r\n    }\r\n\r\n    isolineParameters.range = ranges.join(\",\");\r\n  }\r\n  return isolineParameters;\r\n};\r\n\r\nexport const requestIsochronesResults = () => ({\r\n  type: REQUEST_ISOCHRONES_RESULTS\r\n});","import {\r\n  UPDATE_TEXTINPUT,\r\n  REQUEST_GEOCODE_RESULTS,\r\n  RECEIVE_GEOCODE_RESULTS,\r\n  UPDATE_CENTER,\r\n  UPDATE_SETTINGS,\r\n  REQUEST_ISOCHRONES_RESULTS,\r\n  // new\r\n  RECEIVE_ISOCHRONES_RESULTS,\r\n} from '../actions/actions'\r\nimport { combineReducers } from 'redux'\r\n\r\n// these are our initial isochrones settings\r\nconst initialIsochronesControlsState = {\r\n  userInput: \"\",\r\n  geocodeResults: [],\r\n  isochrones: {\r\n    results: []\r\n  },\r\n  isFetching: false,\r\n  isFetchingIsochrones: false,\r\n  settings: {\r\n    isochronesCenter: {},\r\n    range: {\r\n      max: 500,\r\n      value: 60\r\n    },\r\n    interval: {\r\n      max: 60,\r\n      value: 10\r\n    },\r\n    mode: \"car\",\r\n    rangetype: \"distance\",\r\n    traffic: \"disabled\"\r\n  }\r\n}\r\n\r\n// our reducer constant returning an unchanged or updated state object depending on the users action, many cases will follow\r\nconst isochronesControls = (state = initialIsochronesControlsState, action) => {\r\n  switch (action.type) {\r\n    // when a user inputs text we update the userInput :) easy!\r\ncase UPDATE_TEXTINPUT:\r\n  return {\r\n    ...state,\r\n    userInput: action.payload.inputValue\r\n  }\r\n// let the app know the request is being made (for our spinner)\r\ncase REQUEST_GEOCODE_RESULTS:\r\n  return {\r\n    ...state,\r\n    isFetching: true\r\n  }\r\n// when results are returned by the API update the state with addresses and let the app know it is no longer fetching\r\ncase RECEIVE_GEOCODE_RESULTS:\r\n  return {\r\n    ...state,\r\n    geocodeResults: action.results,\r\n    isFetching: false\r\n  }\r\ncase REQUEST_ISOCHRONES_RESULTS:\r\n  return {\r\n    ...state,\r\n    isFetchingIsochrones: true\r\n\r\n  }\r\ncase RECEIVE_ISOCHRONES_RESULTS:\r\n  return {\r\n    ...state,\r\n    isFetchingIsochrones: false,\r\n    isochrones: {\r\n      results: action.results\r\n    }\r\n  }\r\n\r\ncase UPDATE_SETTINGS:\r\n  return {\r\n    ...state,\r\n    settings: action.settings\r\n  }\r\n// update the isochronesCenter we will use later from the coordinates of the selected address\r\ncase UPDATE_CENTER:\r\n  return {\r\n    ...state,\r\n    settings: {\r\n      ...state.settings,\r\n      isochronesCenter: action.isochronesCenter\r\n    }\r\n  }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// creates a root reducer and combines different reducers if needed\r\nconst rootReducer = combineReducers({\r\n  isochronesControls\r\n})\r\n\r\nexport default rootReducer","import * as L from \"leaflet\";\r\n\r\nvar HereTileLayers = {};\r\n\r\n// 🍂class TileLayer.HERE\r\n// Tile layer for HERE maps tiles.\r\nHereTileLayers.HERE = L.TileLayer.extend({\r\n  options: {\r\n    subdomains: \"1234\",\r\n    minZoom: 2,\r\n    maxZoom: 18,\r\n\r\n    // 🍂option scheme: String = 'normal.day'\r\n    // The \"map scheme\", as documented in the HERE API.\r\n    scheme: \"normal.day\",\r\n\r\n    // 🍂option resource: String = 'maptile'\r\n    // The \"map resource\", as documented in the HERE API.\r\n    resource: \"maptile\",\r\n\r\n    // 🍂option mapId: String = 'newest'\r\n    // Version of the map tiles to be used, or a hash of an unique map\r\n    mapId: \"newest\",\r\n\r\n    // 🍂option format: String = 'png8'\r\n    // Image format to be used (`png8`, `png`, or `jpg`)\r\n    format: \"png8\",\r\n\r\n    // 🍂option appId: String = ''\r\n    // Required option. The `app_id` provided as part of the HERE credentials\r\n    appId: \"\",\r\n\r\n    // 🍂option appCode: String = ''\r\n    // Required option. The `app_code` provided as part of the HERE credentials\r\n    appCode: \"\"\r\n  },\r\n\r\n  initialize: function initialize(options) {\r\n    options = L.setOptions(this, options);\r\n\r\n    // Decide if this scheme uses the aerial servers or the basemap servers\r\n    var schemeStart = options.scheme.split(\".\")[0];\r\n    options.tileResolution = 256;\r\n\r\n    if (L.Browser.retina) {\r\n      options.tileResolution = 512;\r\n    }\r\n\r\n    //    {Base URL}{Path}/{resource (tile type)}/{map id}/{scheme}/{zoom}/{column}/{row}/{size}/{format}\r\n    //    ?app_id={YOUR_APP_ID}\r\n    //    &app_code={YOUR_APP_CODE}\r\n    //    &{param}={value}\r\n\r\n    var path =\r\n      \"/{resource}/2.1/{resource}/{mapId}/{scheme}/{z}/{x}/{y}/{tileResolution}/{format}?app_id={appId}&app_code={appCode}\";\r\n    var attributionPath =\r\n      \"/maptile/2.1/copyright/{mapId}?app_id={appId}&app_code={appCode}\";\r\n\r\n    var tileServer = \"base.maps.api.here.com\";\r\n    if (\r\n      // eslint-disable-next-line\r\n      schemeStart == \"satellite\" ||\r\n      // eslint-disable-next-line\r\n      schemeStart == \"terrain\" ||\r\n      // eslint-disable-next-line\r\n      schemeStart == \"hybrid\"\r\n    ) {\r\n      tileServer = \"aerial.maps.api.here.com\";\r\n    }\r\n    if (options.scheme.indexOf(\".traffic.\") !== -1) {\r\n      tileServer = \"traffic.maps.api.here.com\";\r\n    }\r\n\r\n    var tileUrl = \"https://{s}.\" + tileServer + path;\r\n\r\n    this._attributionUrl = L.Util.template(\r\n      \"https://1.\" + tileServer + attributionPath,\r\n      this.options\r\n    );\r\n\r\n    L.TileLayer.prototype.initialize.call(this, tileUrl, options);\r\n\r\n    this._attributionText = \"\";\r\n  },\r\n\r\n  onAdd: function onAdd(map) {\r\n    L.TileLayer.prototype.onAdd.call(this, map);\r\n\r\n    if (!this._attributionBBoxes) {\r\n      this._fetchAttributionBBoxes();\r\n    }\r\n  },\r\n\r\n  onRemove: function onRemove(map) {\r\n    L.TileLayer.prototype.onRemove.call(this, map);\r\n\r\n    this._map.attributionControl.removeAttribution(this._attributionText);\r\n\r\n    this._map.off(\"moveend zoomend resetview\", this._findCopyrightBBox, this);\r\n  },\r\n\r\n  _fetchAttributionBBoxes: function _onMapMove() {\r\n    var xmlhttp = new XMLHttpRequest();\r\n    xmlhttp.onreadystatechange = L.bind(function() {\r\n      // eslint-disable-next-line\r\n      if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {\r\n        this._parseAttributionBBoxes(JSON.parse(xmlhttp.responseText));\r\n      }\r\n    }, this);\r\n    xmlhttp.open(\"GET\", this._attributionUrl, true);\r\n    xmlhttp.send();\r\n  },\r\n\r\n  _parseAttributionBBoxes: function _parseAttributionBBoxes(json) {\r\n    if (!this._map) {\r\n      return;\r\n    }\r\n    var providers = json[this.options.scheme.split(\".\")[0]] || json.normal;\r\n    for (var i = 0; i < providers.length; i++) {\r\n      if (providers[i].boxes) {\r\n        for (var j = 0; j < providers[i].boxes.length; j++) {\r\n          var box = providers[i].boxes[j];\r\n          providers[i].boxes[j] = L.latLngBounds([\r\n            [box[0], box[1]],\r\n            [box[2], box[3]]\r\n          ]);\r\n        }\r\n      }\r\n    }\r\n\r\n    this._map.on(\"moveend zoomend resetview\", this._findCopyrightBBox, this);\r\n\r\n    this._attributionProviders = providers;\r\n\r\n    this._findCopyrightBBox();\r\n  },\r\n\r\n  _findCopyrightBBox: function _findCopyrightBBox() {\r\n    if (!this._map) {\r\n      return;\r\n    }\r\n    var providers = this._attributionProviders;\r\n    var visibleProviders = [];\r\n    var zoom = this._map.getZoom();\r\n    var visibleBounds = this._map.getBounds();\r\n\r\n    for (var i = 0; i < providers.length; i++) {\r\n      if (providers[i].minLevel < zoom && providers[i].maxLevel > zoom)\r\n        if (!providers[i].boxes) {\r\n          // No boxes = attribution always visible\r\n          visibleProviders.push(providers[i]);\r\n          break;\r\n        }\r\n\r\n      for (var j = 0; j < providers[i].boxes.length; j++) {\r\n        var box = providers[i].boxes[j];\r\n        if (visibleBounds.overlaps(box)) {\r\n          visibleProviders.push(providers[i]);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    var attributions = [\r\n      '<a href=\"https://legal.here.com/terms/serviceterms/gb/\">HERE maps</a>'\r\n    ];\r\n    // eslint-disable-next-line\r\n    for (var i = 0; i < visibleProviders.length; i++) {\r\n      var provider = visibleProviders[i];\r\n      attributions.push(\r\n        '<abbr title=\"' + provider.alt + '\">' + provider.label + \"</abbr>\"\r\n      );\r\n    }\r\n\r\n    var attributionText = \"© \" + attributions.join(\", \") + \". \";\r\n\r\n    if (attributionText !== this._attributionText) {\r\n      this._map.attributionControl.removeAttribution(this._attributionText);\r\n      this._map.attributionControl.addAttribution(\r\n        (this._attributionText = attributionText)\r\n      );\r\n    }\r\n  }\r\n});\r\n\r\nHereTileLayers.here = function(opts) {\r\n  return new HereTileLayers.HERE(opts);\r\n};\r\n\r\nexport default HereTileLayers;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport L from \"leaflet\";\r\nimport PropTypes from \"prop-types\";\r\nimport chroma from \"chroma-js\";\r\n\r\nimport HereTileLayers from \"./hereTileLayers\";\r\n\r\n// defining the container styles the map sits in\r\nconst style = {\r\n  width: \"100%\",\r\n  height: \"100vh\"\r\n};\r\n\r\n// using the reduced.day map styles, have a look at the imported hereTileLayers for more\r\nconst hereReducedDay = HereTileLayers.here({\r\n  appId: \"jKco7gLGf0WWlvS5n2fl\",\r\n  appCode: \"HQnCztY23zh2xiTPCFiTMA\",\r\n  scheme: \"reduced.day\"\r\n});\r\n\r\n// for this app we create two leaflet layer groups to control, one for the isochrone centers and one for the isochrone contours\r\nconst markersLayer = L.featureGroup();\r\nconst isochronesLayer = L.featureGroup();\r\n\r\n// we define our bounds of the map\r\nconst southWest = L.latLng(-90, -180),\r\n  northEast = L.latLng(90, 180),\r\n  bounds = L.latLngBounds(southWest, northEast);\r\n\r\n// a leaflet map consumes parameters, I'd say they are quite self-explanatory\r\nconst mapParams = {\r\n  center: [25.95681, -35.729687],\r\n  zoomControl: false,\r\n  maxBounds: bounds,\r\n  zoom: 2,\r\n  layers: [markersLayer, isochronesLayer, hereReducedDay]\r\n};\r\n\r\n// this you have seen before, we define a react component\r\nclass Map extends React.Component {\r\n  static propTypes = {\r\n    isochronesControls: PropTypes.object.isRequired,\r\n    mapEvents: PropTypes.object,\r\n    dispatch: PropTypes.func.isRequired\r\n  };\r\n\r\n  addIsochrones() {\r\n    isochronesLayer.clearLayers();\r\n\r\n    const isochrones = this.props.isochronesControls.isochrones.results;\r\n\r\n    if (isochrones.length > 0) {\r\n      let cnt = 0;\r\n\r\n      const scaleHsl = chroma\r\n        .scale([\"#f44242\", \"#f4be41\", \"#41f497\"])\r\n        .mode(\"hsl\")\r\n        .colors(isochrones.length);\r\n\r\n      for (const isochrone of isochrones) {\r\n        for (const isochroneComponent of isochrone.component) {\r\n          L.polygon(\r\n            isochroneComponent.shape.map(function(coordString) {\r\n              return coordString.split(\",\");\r\n            }),\r\n            {\r\n              fillColor: scaleHsl[cnt],\r\n              weight: 2,\r\n              opacity: 1,\r\n              color: \"white\",\r\n              pane: \"isochronesPane\"\r\n            }\r\n          ).addTo(isochronesLayer);\r\n        }\r\n        cnt += 1;\r\n      }\r\n\r\n      this.map.fitBounds(isochronesLayer.getBounds());\r\n    }\r\n  }\r\n\r\n  addIsochronesCenter() {\r\n    // clear the markers layer beforehand\r\n    markersLayer.clearLayers();\r\n\r\n    const isochronesCenter = this.props.isochronesControls.settings\r\n      .isochronesCenter;\r\n\r\n    // does this object contain a latitude and longitude?\r\n    if (isochronesCenter.lat && isochronesCenter.lng) {\r\n      // we are creating a leaflet circle marker with a minimal tooltip\r\n      L.circleMarker(isochronesCenter)\r\n        .addTo(markersLayer)\r\n        .bindTooltip(\r\n          \"latitude: \" +\r\n            isochronesCenter.lat +\r\n            \", \" +\r\n            \"longitude: \" +\r\n            isochronesCenter.lng,\r\n          {\r\n            permanent: false\r\n          }\r\n        )\r\n        .openTooltip();\r\n\r\n      // set the map view\r\n      this.map.setView(isochronesCenter, 7);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.addIsochronesCenter();\r\n    this.addIsochrones();\r\n  }\r\n\r\n  // and once the component has mounted we add everything to it\r\n  componentDidMount() {\r\n    // our map!\r\n    this.map = L.map(\"map\", mapParams);\r\n\r\n    // we create a leaflet pane which will hold all isochrone polygons with a given opacity\r\n    var isochronesPane = this.map.createPane(\"isochronesPane\");\r\n    isochronesPane.style.opacity = 0.9;\r\n\r\n    // our basemap and add it to the map\r\n    const baseMaps = {\r\n      \"HERE reduced.day\": hereReducedDay\r\n    };\r\n    L.control.layers(baseMaps).addTo(this.map);\r\n\r\n    // we do want a zoom control\r\n    L.control\r\n      .zoom({\r\n        position: \"topright\"\r\n      })\r\n      .addTo(this.map);\r\n\r\n    // and for the sake of advertising your company, you may add a logo to the map\r\n    const brand = L.control({\r\n      position: \"bottomright\"\r\n    });\r\n    brand.onAdd = function(map) {\r\n      var div = L.DomUtil.create(\"div\", \"brand\");\r\n      div.innerHTML =\r\n        '<a href=\"https://gis.ops.com\" target=\"_blank\"><img src=\"http://104.199.51.11:8083/wp-content/uploads/2018/11/gisops.png\" width=\"150px\"></img></a>';\r\n      return div;\r\n    };\r\n    this.map.addControl(brand);\r\n  }\r\n\r\n  // don't forget to render it :-)\r\n  render() {\r\n    return <div id=\"map\" style={style} />;\r\n  }\r\n}\r\n\r\n// and we already map the redux store to properties which we will start soon\r\nconst mapStateToProps = state => {\r\n  const isochronesControls = state.isochronesControls;\r\n  return {\r\n    isochronesControls\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Map);","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { connect } from \"react-redux\"\r\nimport { Slider } from \"react-semantic-ui-range\"\r\nimport { Label, Button, Divider } from \"semantic-ui-react\"\r\n\r\n// we need just one action in this component to update settings made\r\nimport { updateSettings } from \"../actions/actions\"\r\n\r\nclass Settings extends React.Component {\r\n\r\n  static propTypes = {\r\n    dispatch: PropTypes.func.isRequired,\r\n    controls: PropTypes.object.isRequired\r\n  }\r\n\r\n  // dispatches the action\r\n  updateSettings() {\r\n    const { controls, dispatch } = this.props\r\n\r\n    dispatch(\r\n      updateSettings({\r\n        settings: controls.settings\r\n      })\r\n    )\r\n  }\r\n\r\n  // we are making settings directly in the controls.settings object which is being passed on to the updateSettings() function up top\r\n  handleSettings(settingName, setting) {\r\n    const { controls } = this.props\r\n\r\n    controls.settings[settingName] = setting\r\n\r\n    this.updateSettings()\r\n  }\r\n\r\n  // this looks complex but it isn't, we basically want to make sure the the interval settings maximum can never be greater than the range maximum\r\n  alignRangeInterval() {\r\n    const { controls } = this.props\r\n\r\n    if (\r\n      controls.settings.range.value < controls.settings.interval.value ||\r\n      controls.settings.interval.value === \"\"\r\n    ) {\r\n      controls.settings.interval.value = controls.settings.range.value\r\n    }\r\n\r\n    controls.settings.interval.max = controls.settings.range.value\r\n  }\r\n\r\n  render() {\r\n    const { controls } = this.props\r\n\r\n    // depending on what the user selected we obviously want to show the correct units\r\n    const rangetype =\r\n      controls.settings.rangetype === \"time\" ? \" minutes\" : \" kilometers\"\r\n\r\n    // our settings which are needed for the range slider, read more here https://github.com/iozbeyli/react-semantic-ui-range\r\n    const rangeSettings = {\r\n      settings: {\r\n        ...controls.settings.range,\r\n        min: 1,\r\n        step: 1,\r\n        start: controls.settings.range.value,\r\n        // when the slider is moved, we want to update our settings and make sure the maximums align\r\n        onChange: value => {\r\n          controls.settings.range.value = value\r\n\r\n          this.alignRangeInterval()\r\n          this.updateSettings()\r\n        }\r\n      }\r\n    }\r\n    // same as above, just for the interval slider this time\r\n    const intervalSettings = {\r\n      settings: {\r\n        ...controls.settings.interval,\r\n        min: 1,\r\n        step: 1,\r\n        start: controls.settings.interval.value,\r\n        onChange: value => {\r\n          controls.settings.interval.value = value\r\n          this.updateSettings()\r\n        }\r\n      }\r\n    }\r\n    // we have different kinds of settings in here. The components should be quite self-explanatory. Whenever a button is clicked we call handleSettings() and this way pass on our setting through to our state.\r\n    return (\r\n      <div className=\"mt3\">\r\n        <Divider />\r\n        <Label size=\"small\">{\"Mode of transport\"}</Label>\r\n        <div className=\"mt3\">\r\n          <Button.Group basic size=\"small\">\r\n            {Object.keys({ pedestrian: {}, car: {} }).map((key, i) => (\r\n              <Button\r\n                active={key === controls.settings.mode}\r\n                key={i}\r\n                mode={key}\r\n                onClick={() => this.handleSettings(\"mode\", key)}\r\n              >\r\n                {key}\r\n              </Button>\r\n            ))}\r\n          </Button.Group>\r\n          {controls.settings.mode === \"car\" && (\r\n            <div>\r\n              <Divider />\r\n              <Label size=\"small\">{\"Traffic\"}</Label>\r\n              <div className=\"mt3\">\r\n                <Button.Group basic size=\"small\">\r\n                  {Object.keys({ enabled: {}, disabled: {} }).map((key, i) => (\r\n                    <Button\r\n                      active={key === controls.settings.traffic}\r\n                      key={i}\r\n                      mode={key}\r\n                      onClick={() => this.handleSettings(\"traffic\", key)}\r\n                    >\r\n                      {key}\r\n                    </Button>\r\n                  ))}\r\n                </Button.Group>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <Divider />\r\n        <Label size=\"small\">{\"Range type\"}</Label>\r\n        <div className=\"mt3\">\r\n          <Button.Group basic size=\"small\">\r\n            {Object.keys({ distance: {}, time: {} }).map((key, i) => (\r\n              <Button\r\n                active={key === controls.settings.rangetype}\r\n                key={i}\r\n                mode={key}\r\n                onClick={() => this.handleSettings(\"rangetype\", key)}\r\n              >\r\n                {key}\r\n              </Button>\r\n            ))}\r\n          </Button.Group>\r\n        </div>\r\n        <Divider />\r\n        <Label size=\"small\">{\"Maximum range\"}</Label>\r\n        <div className=\"mt3\">\r\n          <Slider\r\n            discrete\r\n            color=\"grey\"\r\n            value={controls.settings.range.value}\r\n            inverted={false}\r\n            settings={rangeSettings.settings}\r\n          />\r\n          <div className=\"mt2\">\r\n            <Label className=\"mt2\" color=\"grey\" size={\"mini\"}>\r\n              {controls.settings.range.value + rangetype}\r\n            </Label>\r\n          </div>\r\n        </div>\r\n        <Divider />\r\n        <Label size=\"small\">{\"Interval step\"}</Label>\r\n        <div className=\"mt3\">\r\n          <Slider\r\n            discrete\r\n            color=\"grey\"\r\n            value={controls.settings.interval.value}\r\n            inverted={false}\r\n            settings={intervalSettings.settings}\r\n          />\r\n          <div className=\"mt2\">\r\n            <Label className=\"mt2\" color=\"grey\" size={\"mini\"}>\r\n              {controls.settings.interval.value + rangetype}\r\n            </Label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const controls = state.isochronesControls\r\n  return {\r\n    controls\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Settings)","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// we are importing some of the beautiful semantic UI react components\r\nimport { Segment, Search, Divider, Button } from \"semantic-ui-react\";\r\n\r\n// here are our first two actions, we will be adding them in the next step, bare with me!\r\nimport {\r\n  updateTextInput,\r\n  fetchHereGeocode,\r\n  updateCenter,\r\n  fetchHereIsochrones\r\n} from \"../actions/actions\";\r\n\r\nimport Settings from \"./Settings\";\r\n\r\n// to wait for the users input we will add debounce, this is especially useful for \"postponing\" the geocode requests\r\nimport { debounce } from \"throttle-debounce\";\r\n\r\n// some inline styles (we should move these to our index.css at one stage)\r\nconst segmentStyle = {\r\n  zIndex: 999,\r\n  position: \"absolute\",\r\n  width: \"400px\",\r\n  top: \"10px\",\r\n  left: \"10px\",\r\n  maxHeight: \"calc(100vh - 5vw)\",\r\n  overflow: \"auto\",\r\n  padding: \"20px\"\r\n};\r\n\r\nclass Control extends React.Component {\r\n  static propTypes = {\r\n    userTextInput: PropTypes.string.isRequired,\r\n    results: PropTypes.array.isRequired,\r\n    isFetching: PropTypes.bool.isRequired,\r\n    dispatch: PropTypes.func.isRequired,\r\n    isochronesCenter: PropTypes.object,\r\n    isFetchingIsochrones: PropTypes.bool.isRequired\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    // binding this to the handleSearchChange method\r\n    this.handleSearchChange = this.handleSearchChange.bind(this);\r\n    // we are wrapping fetchGeocodeResults in a 1 second debounce\r\n    this.fetchGeocodeResults = debounce(1000, this.fetchGeocodeResults);\r\n  }\r\n\r\n  // if the input has changed... fetch some results!\r\n  handleSearchChange = event => {\r\n    const { dispatch } = this.props;\r\n\r\n    dispatch(\r\n      updateTextInput({\r\n        inputValue: event.target.value\r\n      })\r\n    );\r\n    this.fetchGeocodeResults();\r\n  };\r\n\r\n  // if a user selects one of the geocode results update the input text field and set our center coordinates\r\n  handleResultSelect = (e, { result }) => {\r\n    const { dispatch } = this.props;\r\n\r\n    dispatch(\r\n      updateTextInput({\r\n        inputValue: result.title\r\n      })\r\n    );\r\n\r\n    dispatch(\r\n      updateCenter({\r\n        isochronesCenter: result.displayposition\r\n      })\r\n    );\r\n  };\r\n\r\n  // our method to fire a geocode request\r\n  fetchGeocodeResults() {\r\n    const { dispatch, userTextInput } = this.props;\r\n    // If the text input has more then 0 characters..\r\n    if (userTextInput.length > 0) {\r\n      dispatch(\r\n        fetchHereGeocode({\r\n          inputValue: userTextInput\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  handleFetchIsochrones = () => {\r\n    const { dispatch, settings } = this.props;\r\n\r\n    if (settings.isochronesCenter.lat && settings.isochronesCenter.lng) {\r\n      dispatch(fetchHereIsochrones({ settings }));\r\n    }\r\n  };\r\n\r\n  render() {\r\n    // The following constants are used in our search input which is also a semanticUI react component <Search... />\r\n    const {\r\n      isFetching,\r\n      userTextInput,\r\n      results,\r\n      settings,\r\n      isFetchingIsochrones\r\n    } = this.props;\r\n\r\n    // if an address is selected we will return true to enable our button!\r\n    const isResultSelected = () => {\r\n      if (settings.isochronesCenter.lat && settings.isochronesCenter.lng)\r\n        return false;\r\n      return true;\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <Segment style={segmentStyle}>\r\n          <div>\r\n            <span>\r\n              Isochrones powered by <strong>HERE Maps</strong>\r\n            </span>\r\n          </div>\r\n          <Divider />\r\n          {/* they are tachyons css classes by the way..*/}\r\n          <div className=\"flex justify-between items-center mt3\">\r\n            {/* more about the props can be read here https://react.semantic-ui.com/modules/search the most important part to mention here are our objects being fed to it. When a user types text into the input handleSearchChange is called. When the geocode API is called the variable loading will be set true to show the spinner (coming from state). The results are shown in a dropdown list (also coming from the state) and the value shown in the input is userTextInput (..also from state). */}\r\n            <Search\r\n              onSearchChange={this.handleSearchChange}\r\n              onResultSelect={this.handleResultSelect}\r\n              type=\"text\"\r\n              fluid\r\n              input={{ fluid: true }}\r\n              loading={isFetching}\r\n              className=\"flex-grow-1 mr2\"\r\n              results={results}\r\n              value={userTextInput}\r\n              placeholder=\"Find Address ...\"\r\n            />\r\n            <Button\r\n              circular\r\n              loading={isFetchingIsochrones}\r\n              disabled={isResultSelected()}\r\n              color=\"purple\"\r\n              icon=\"globe\"\r\n              onClick={this.handleFetchIsochrones}\r\n            />\r\n          </div>\r\n          <div className=\"mt2\">\r\n            <Settings />\r\n          </div>\r\n        </Segment>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//\r\nconst mapStateToProps = state => {\r\n  const userTextInput = state.isochronesControls.userInput;\r\n  const results = state.isochronesControls.geocodeResults;\r\n  const isFetching = state.isochronesControls.isFetching;\r\n\r\n  // new\r\n  const settings = state.isochronesControls.settings;\r\n  // new\r\n  const isFetchingIsochrones = state.isochronesControls.isFetchingIsochrones;\r\n\r\n  return {\r\n    userTextInput,\r\n    results,\r\n    isFetching,\r\n    settings,\r\n    isFetchingIsochrones\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Control);","import React from 'react'\r\nimport Map from './Map/Map'\r\nimport Controls from './Controls/Control'\r\n\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Map />\r\n\t<Controls />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport { render } from 'react-dom'\r\n\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { Provider } from 'react-redux'\r\nimport thunk from 'redux-thunk'\r\nimport { createLogger } from 'redux-logger'\r\n\r\nimport reducer from './reducers'\r\nimport App from './App'\r\nimport './index.css' // postCSS import of CSS module\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n)\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    {' '}\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}